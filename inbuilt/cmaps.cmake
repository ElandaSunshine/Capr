########################################################################################################################
include_guard()

########################################################################################################################
set(CMAPS_DEFAULT_SEVERITY "FATAL_ERROR" CACHE STRING "The default log level for any Maps function call")

########################################################################################################################
macro(cmaps_internal_log_message message)
    if (NOT DEFINED ARG_SEVERITY OR "SEVERITY" IN_LIST ARG_KEYWORDS_MISSING_VALUES)
        set(ARG_SEVERITY "${CMAPS_DEFAULT_SEVERITY}")
    endif()

    string(TOLOWER ${ARG_SEVERITY} log_severity)

    if ("${log_severity}" STREQUAL "fatal_error")
        message(FATAL_ERROR "${message}")
    elseif("${log_severity}" STREQUAL "send_error")
        message(SEND_ERROR "${message}")
    elseif("${log_severity}" STREQUAL "warning")
        message(WARNING "${message}")
    elseif("${log_severity}" STREQUAL "status")
        message(STATUS "${message}")
    elseif("${log_severity}" STREQUAL "verbose")
        message(VERBOSE "${message}")
    elseif("${log_severity}" STREQUAL "debug")
        message(DEBUG "${message}")
    elseif("${log_severity}" STREQUAL "trace")
        message(TRACE "${message}")
    else()
        message(NOTICE "${message}")
    endif()
endmacro()

function(cmaps action map)
    cmake_parse_arguments(ARG "INCLUDE;EXCLUDE;BY_KEY;BY_VALUE" "REGEX;SEVERITY" "" ${ARGN})

    if("${action}" STREQUAL "LENGTH")
        list(LENGTH ${map} map_length)
        
        if (ARGC LESS 3)
            cmaps_internal_log_message("CMaps' LENGTH action needs a second argument depicting the output variable")
            return()
        endif()

        set(${ARGV2} ${map_length} PARENT_SCOPE)
    elseif("${action}" STREQUAL "GET")
        if (ARGC LESS 3)
            cmaps_internal_log_message("CMaps' GET action needs a second argument depicting the index or the key of the value")
            return()
        endif()

        if (ARGC LESS 4)
            cmaps_internal_log_message("CMaps' GET action needs a third argument depicting the output variable")
            return()
        endif()

        if ("${ARGV2}" MATCHES "^[0-9]+$")
            list(LENGTH ${map} map_length)

            if (${ARGV2} LESS map_length AND ${ARGV2} GREATER_EQUAL 0)
                list(GET ${map} ${ARGV2} get_out)
                string(REPLACE ":" ";" get_out ${get_out})

                list(GET get_out 1 out_value)
                set(${ARGV3} ${out_value} PARENT_SCOPE)

                if (ARGC EQUAL 5)
                    list(GET get_out 0 out_key)
                    set(${ARGV4} ${out_key} PARENT_SCOPE)
                endif()
            else()
                cmaps_internal_log_message("The index ${ARGV0} was out of bounds for map ${map}")
                return()
            endif()
        else()
            foreach(entry IN LISTS ${map})
                string(REPLACE ":" ";" entry ${entry})
                list(GET entry 0 entry_key)

                if ("${entry_key}" STREQUAL "${ARGV2}")
                    list(GET entry 1 entry_val)
                    set(${ARGV3} ${entry_val} PARENT_SCOPE)
                    return()
                endif()
            endforeach()

            set(${ARGV3} "NOTFOUND" PARENT_SCOPE)
        endif()
    elseif("${action}" STREQUAL "FIND")
        if (ARGC LESS 3)
            cmaps_internal_log_message("CMaps' FIND action needs a second argument depicting the value to search in the map")
            return()
        endif()

        if (ARGC LESS 4)
            cmaps_internal_log_message("CMaps' FIND action needs a third argument depicting the output variable")
            return()
        endif()

        foreach(entry IN LISTS ${map})
            string(REPLACE ":" ";" entry ${entry})
            list(GET entry 1 entry_val)

            if ("${entry_val}" STREQUAL "${ARGV2}")
                list(GET entry 0 entry_key)
                list(APPEND find_list "${entry_key}")
            endif()
        endforeach()

        set(${ARGV3} "${find_list}" PARENT_SCOPE)
    elseif("${action}" STREQUAL "PUT")
        if (ARGC LESS 3)
            cmaps_internal_log_message("CMaps' PUT action needs a second argument depicting the key of the value to insert")
            return()
        endif()

        if (ARGC LESS 4)
            cmaps_internal_log_message("CMaps' PUT action needs a second argument depicting the value of the key to insert")
            return()
        endif()

        if ("${ARGV3}" STREQUAL "NOTFOUND")
            cmaps_internal_log_message("Invalid value 'NOTFOUND', this keyword is reserved for searching purposes")
            return()
        endif()

        list(LENGTH ${map} map_length)

        if (map_length GREATER 0)
            math(EXPR last_index "${map_length}-1")
            
            foreach(i RANGE ${last_index})
                list(GET ${map} ${i} entry)
                string(REPLACE ":" ";" entry ${entry})
                list(GET entry 0 entry_key)

                if ("${entry_key}" STREQUAL "${ARGV2}")
                    list(REMOVE_AT ${map} ${i})
                    list(INSERT ${map} ${i} "${ARGV2}:${ARGV3}")
                    set(${map} "${${map}}" PARENT_SCOPE)
                    return()
                endif()
            endforeach()
        endif()

        list(APPEND ${map} "${ARGV2}:${ARGV3}")
        set(${map} "${${map}}" PARENT_SCOPE)
    elseif("${action}" STREQUAL "PUT_ABSENT")
        if (ARGC LESS 3)
            cmaps_internal_log_message("CMaps' PUT_ABSENT action needs a second argument depicting the key of the value to insert")
            return()
        endif()

        if (ARGC LESS 4)
            cmaps_internal_log_message("CMaps' PUT_ABSENT action needs a second argument depicting the value of the key to insert")
            return()
        endif()

        cmaps(GET ${map} "${ARGV2}" found_item)

        if (NOT "${found_item}" STREQUAL "NOTFOUND")
            return()
        endif()

        if ("${ARGV3}" STREQUAL "NOTFOUND")
            cmaps_internal_log_message("Invalid value 'NOTFOUND', this keyword is reserved for searching purposes")
            return()
        endif()

        list(APPEND ${map} "${ARGV2}:${ARGV3}")
        set(${map} "${${map}}" PARENT_SCOPE)
    elseif("${action}" STREQUAL "FILTER")
        if (NOT ARG_INCLUDE AND NOT ARG_EXCLUDE)
            cmaps_internal_log_message("CMaps' FILTER action needs either the INCLUDE or EXCLUDE argument")
            return()
        endif()

        if (ARG_INCLUDE AND ARG_EXCLUDE)
            cmaps_internal_log_message("CMaps' FILTER action needs only one of either INCLUDE or EXCLUDE")
            return()
        endif()

        if ("${ARG_REGEX}" STREQUAL "" OR "REGEX" IN_LIST ARG_KEYWORDS_MISSING_VALUES)
            cmaps_internal_log_message("CMaps' FILTER action needs a REGEX argument")
            return()
        endif()

        if (ARG_BY_KEY AND ARG_BY_VALUE)
            cmaps_internal_log_message("CMaps' FILTER action needs only one of either BY_KEY or BY_VALUE or specify none to filter for both")
            return()
        endif()

        list(LENGTH ${map} map_length)
        math(EXPR last_index "${map_length}-1")
        
        foreach(i RANGE ${last_index})
            list(GET ${map} ${i} entry)
            string(REPLACE ":" ";" entry_pair ${entry})
            
            if (ARG_BY_KEY OR NOT ARG_BY_VALUE)
                list(GET entry_pair 0 out_key)

                if ("${out_key}" MATCHES "${ARG_REGEX}")
                    list(APPEND match_list "${entry}")
                    continue()
                endif()
            endif()

            if(ARG_BY_VALUE OR NOT ARG_BY_KEY)
                list(GET entry_pair 1 out_val)

                if ("${out_val}" MATCHES "${ARG_REGEX}")
                    list(APPEND match_list "${entry}")
                    continue()
                endif()
            endif()

            list(APPEND non_match_list "${entry}")
        endforeach()

        if (ARG_INCLUDE)
            set(${map} ${match_list} PARENT_SCOPE)
        else()
            set(${map} ${non_match_list} PARENT_SCOPE)
        endif()
    elseif("${action}" STREQUAL "REMOVE")
        if (ARGC LESS 3)
            cmaps_internal_log_message("CMaps' REMOVE action needs a second argument depicting the index or the key to remove")
            return()
        endif()

        if ("${ARGV2}" MATCHES "^[0-9]+$")
            list(LENGTH ${map} map_length)

            if (${ARGV2} LESS map_length AND ${ARGV2} GREATER_EQUAL 0)
                list(REMOVE_AT ${map} ${ARGV2})
                set(${map} "${${map}}" PARENT_SCOPE)
            else()
                cmaps_internal_log_message("The index ${ARGV2} was out of bounds for map ${map}")
                return()
            endif()
        else()
            list(LENGTH ${map} map_length)
            math(EXPR last_index "${map_length}-1")
            
            foreach(i RANGE ${last_index})
                list(GET ${map} ${i} entry)
                string(REPLACE ":" ";" entry_pair ${entry})

                list(GET entry_pair 0 out_key)

                if ("${out_key}" STREQUAL "${ARGV2}")
                    list(REMOVE_AT ${map} ${i})
                    set(${map} "${${map}}" PARENT_SCOPE)
                    return()
                endif()
            endforeach()
        endif()
    endif()
endfunction()
